// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  projects      Project[]
  stars         Star[]
  comments      Comment[]
  notifications Notification[]
  subscriptions Subscription[]
  invoices      Invoice[]
}

model Project {
  id          String   @id @default(uuid())
  title       String
  description String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  stars       Star[]
  comments    Comment[]
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Star {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([projectId, userId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Subscription {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  plan        Plan     @relation(fields: [planId], references: [id])
  planId      String
  status      String   @default("ACTIVE")
  startDate   DateTime @default(now())
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoices    Invoice[] @relation(fields: [id], references: [subscriptionId])
}

model Invoice {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  amount      Float
  status      String   @default("PENDING")
  paymentMethod String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Plan {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  price       Float
  type        String   @default("MONTHLY")
  features    Feature[]
  subscriptions Subscription[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Feature {
  id          String   @id @default(uuid())
  name        String
  description String
  plan        Plan     @relation(fields: [planId], references: [id])
  planId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  MODERATOR
}
